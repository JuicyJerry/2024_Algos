// 인접행렬
#include <bits/stdc++.h>
using namespace std;
const int V = 10;
bool a[V][V], visited[V];
void go(int from) {
    visited[from] = 1;
    cout << from << '\n';
    for (int i = 0; i < V; i++) {
        if (visited[i]) continue;
        if (a[from][i]) {
            go(i);
        }
    }
}
int main() {
    a[1][2] = 1; a[1][3] = 1; a[3][4] = 1;
    a[2][1] = 1; a[3][1] = 1; a[4][3] = 1;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if(a[i][j] && visited[i] == 0) {
                go(i);
            }
        }
    }

    return 0;
}

// 인접리스트
#include <bits/stdc++.h>
using namespace std;
const int V = 4;
vector<int> adj[V];
int main() {
    adj[0].push_back(1);
    adj[0].push_back(2);
    adj[0].push_back(3);
    
    adj[1].push_back(0);
    adj[1].push_back(3);
    
    adj[2].push_back(0);
    adj[2].push_back(1);
    
    adj[3].push_back(0);
    
    for (int i = 0; i < 4; i++) {
        cout << i << " :: ";
        for (int there : adj[i]) {
            cout << there << " ";
        }
        cout << '\n';
    }
    
    for (int i = 0; i < 4; i++) {
        cout << i << " :: ";
        for (int j = 0; j < adj[i].size(); j++) {
            cout << adj[i][j] << " ";
        }
        cout << '\n';
    }
    return 0;
}

#include <bits/stdc++.h>
using namespace std;
int const V = 10;
vector<int> adj[V];
int visited[V];
void go(int idx) {
    cout << idx << '\n';

    visited[idx] = 1;
    for (int there : adj[idx]) {
        if (visited[there]) continue; 
        go(there);
    }
    return;
}
int main() {
    adj[1].push_back(2);
    adj[2].push_back(1);
    adj[1].push_back(3);
    adj[3].push_back(1);
    adj[3].push_back(4);
    adj[4].push_back(3);    
    
    for (int i = 0; i < V; i++) {
        if (adj[i].size() && visited[i] == 0) {
            go(i);
        }
    }
   
    return 0;
}

// 그래프가 희소할 때는 인접리스트, 조밀할 때는 인접행렬을 써라.

//  맵과 방향벡터
#include <bits/stdc++.h>
using namespace std;
const int dy[] = {-1, 0, 1, 0};
const int dx[] = {0, 1, 0, -1};
int main() {
    int y = 0, x = 0;
    for (int i = 0; i < 4; i++) {
        int ny = y + dy[i];
        int nx = x + dx[i];
        cout << ny << " : " << nx << '\n';
    }
    return 0;
}
